openapi: 3.0.0
info:
  title: Fitervari
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
tags:
  - User
  - WorkoutPlan
  - Authentication
paths:
  /users:
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
      operationId: get-users
    post:
      summary: Activate user
      operationId: post-users
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      tags:
        - User
  '/users/{userId}':
    get:
      summary: Get specific user
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      parameters: []
      tags:
        - User
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    put:
      summary: Update specific user
      operationId: put-users-userId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      tags:
        - User
    delete:
      summary: Delete specific user
      operationId: delete-users-userId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      tags:
        - User
  /authToken:
    parameters: []
    get:
      summary: Generate authToken from activationToken
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
      operationId: get-users-userId-authToken
      parameters:
        - schema:
            type: string
            format: uuid
          in: query
          name: activationToken
          required: true
  /adminToken:
    get:
      summary: Get auth token for trainer
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Unauthorized
      operationId: get-adminToken
      parameters:
        - schema:
            type: string
          in: query
          name: username
          required: true
        - schema:
            type: string
          in: query
          name: password
          required: true
  '/users/{userId}/activationToken':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Generate activationToken for user
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              examples: {}
        '401':
          description: Unauthorized
          headers: {}
        '404':
          description: Not Found
      operationId: get-users-userId-activationToken
  '/users/{userId}/workoutPlans/':
    get:
      summary: Get workout plans of user
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WorkoutPlan'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-user-workoutPlans
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: Add workout plan for user
      operationId: post-users-userId-workoutPlans
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutPlan'
      tags:
        - User
  '/workoutPlans/{workoutPlanId}/':
    parameters:
      - schema:
          type: number
        name: workoutPlanId
        in: path
        required: true
    get:
      summary: Get specific workout plan
      tags:
        - WorkoutPlan
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutPlan'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-workoutPlans-workoutId
    delete:
      summary: Delete specific workout plan
      operationId: delete-workoutPlans-workoutPlanId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      tags:
        - WorkoutPlan
    put:
      summary: Update specific workout plan
      operationId: put-workoutPlans-workoutPlanId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutPlan'
      tags:
        - WorkoutPlan
  '/workoutPlans/{workoutPlanId}/workoutSessions/':
    parameters:
      - schema:
          type: number
        name: workoutPlanId
        in: path
        required: true
    get:
      summary: Get workout sessions of workout plan
      tags:
        - WorkoutPlan
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-workoutPlans-workoutId-workoutSessions
    post:
      summary: Add workout sessions of workout plan
      operationId: post-workoutPlans-workoutPlanId-workoutSessions
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSession'
      tags:
        - WorkoutPlan
  '/workoutSessions/{workoutSessionId}':
    parameters:
      - schema:
          type: number
        name: workoutSessionId
        in: path
        required: true
    get:
      summary: Get specific workout session
      tags:
        - WorkoutPlan
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-workoutSessions-workoutSessionId
    delete:
      summary: Delete specific workout session
      operationId: delete-workoutSessions-workoutSessionId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      tags:
        - WorkoutPlan
  /devices:
    get:
      summary: Get all devices
      tags:
        - Device
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      operationId: get-devices
    post:
      summary: Add device
      operationId: post-devices
      responses:
        '201':
          description: Created
        '401':
          description: Unauthorized
      tags:
        - Device
  '/devices/{deviceId}':
    parameters:
      - schema:
          type: number
        name: deviceId
        in: path
        required: true
    get:
      summary: Get specific device
      tags:
        - Device
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      operationId: get-devices-deviceId
    put:
      summary: Update specific device
      operationId: put-devices-deviceId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      tags:
        - Device
    delete:
      summary: Delete specific device
      operationId: delete-devices-deviceId
      responses:
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      tags:
        - Device
  /deviceTypes:
    get:
      summary: Get all device types
      tags:
        - Device
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceType'
        '401':
          description: Unauthorized
      operationId: get-deviceTypes
    parameters: []
components:
  schemas:
    User:
      type: object
      title: User
      examples:
        - id: 1
          name: Tobias Kern
          trainer: 0
          creationDate: 1640005950
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        firstname:
          type: string
          readOnly: true
        lastname:
          type: string
          readOnly: true
        trainer:
          type: integer
          format: int64
          minimum: 0
        creationDate:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
      required:
        - id
        - firstname
        - lastname
        - trainer
        - creationDate
    Token:
      type: string
      title: Token
      format: uuid
      readOnly: true
      examples:
        - 497f6eca-6276-4993-bfeb-53cbbbba6f08
    Set:
      title: Set
      type: object
      description: ''
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/Exercise'
      required:
        - id
        - exercises
    Exercise:
      title: Exercise
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        name:
          type: string
        description:
          type: string
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        repetitions:
          type: integer
          default: 1
          minimum: 1
      required:
        - id
        - name
        - deviceType
    WorkoutPlan:
      title: WorkoutPlan
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        name:
          type: string
        description:
          type: string
        valid_from:
          type: string
          format: date
        valid_till:
          type: string
          format: date
        sets:
          $ref: '#/components/schemas/Set'
        breakLength:
          type: integer
          minimum: 0
        daysPerWeek:
          type: integer
          minimum: 1
      required:
        - id
        - name
        - description
        - sets
        - breakLength
        - daysPerWeek
    WorkoutSession:
      title: WorkoutSession
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        date:
          type: string
        plan:
          type: integer
          format: int64
          minimum: 0
        healthData:
          type: array
          items:
            $ref: '#/components/schemas/HealthData'
      required:
        - id
        - date
        - plan
    HealthData:
      title: HealthData
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        type:
          type: string
          enum:
            - pulse
            - energyBurned
        value:
          type: string
        time:
          type: integer
      required:
        - id
        - type
        - value
        - time
    Device:
      title: Device
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        type:
          $ref: '#/components/schemas/DeviceType'
        studio:
          type: integer
          format: int64
          minimum: 0
        notes:
          type: string
      required:
        - id
        - type
        - studio
    DeviceType:
      title: DeviceType
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        name:
          type: string
        description:
          type: string
      required:
        - id
        - name
    Studio:
      title: Studio
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 0
          readOnly: true
        name:
          type: string
        address:
          type: string
      required:
        - id
        - name
        - address
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters: {}
  responses: {}
security:
  - bearerAuth: []
