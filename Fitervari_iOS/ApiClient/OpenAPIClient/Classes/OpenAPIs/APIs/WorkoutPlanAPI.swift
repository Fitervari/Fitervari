//
// WorkoutPlanAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WorkoutPlanAPI {

    /**
     Delete specific workout plan
     
     - parameter workoutPlanId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteWorkoutPlansWorkoutPlanId(workoutPlanId: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteWorkoutPlansWorkoutPlanIdWithRequestBuilder(workoutPlanId: workoutPlanId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete specific workout plan
     - DELETE /workoutPlans/{workoutPlanId}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter workoutPlanId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkoutPlansWorkoutPlanIdWithRequestBuilder(workoutPlanId: Double) -> RequestBuilder<Void> {
        var localVariablePath = "/workoutPlans/{workoutPlanId}/"
        let workoutPlanIdPreEscape = "\(APIHelper.mapValueToPathItem(workoutPlanId))"
        let workoutPlanIdPostEscape = workoutPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workoutPlanId}", with: workoutPlanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete specific workout session
     
     - parameter workoutSessionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteWorkoutSessionsWorkoutSessionId(workoutSessionId: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteWorkoutSessionsWorkoutSessionIdWithRequestBuilder(workoutSessionId: workoutSessionId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete specific workout session
     - DELETE /workoutSessions/{workoutSessionId}
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter workoutSessionId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteWorkoutSessionsWorkoutSessionIdWithRequestBuilder(workoutSessionId: Double) -> RequestBuilder<Void> {
        var localVariablePath = "/workoutSessions/{workoutSessionId}"
        let workoutSessionIdPreEscape = "\(APIHelper.mapValueToPathItem(workoutSessionId))"
        let workoutSessionIdPostEscape = workoutSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workoutSessionId}", with: workoutSessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get specific workout plan
     
     - parameter workoutPlanId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWorkoutPlansWorkoutId(workoutPlanId: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WorkoutPlan?, _ error: Error?) -> Void)) -> RequestTask {
        return getWorkoutPlansWorkoutIdWithRequestBuilder(workoutPlanId: workoutPlanId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get specific workout plan
     - GET /workoutPlans/{workoutPlanId}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter workoutPlanId: (path)  
     - returns: RequestBuilder<WorkoutPlan> 
     */
    open class func getWorkoutPlansWorkoutIdWithRequestBuilder(workoutPlanId: Double) -> RequestBuilder<WorkoutPlan> {
        var localVariablePath = "/workoutPlans/{workoutPlanId}/"
        let workoutPlanIdPreEscape = "\(APIHelper.mapValueToPathItem(workoutPlanId))"
        let workoutPlanIdPostEscape = workoutPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workoutPlanId}", with: workoutPlanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WorkoutPlan>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get workout sessions of workout plan
     
     - parameter workoutPlanId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWorkoutPlansWorkoutIdWorkoutSessions(workoutPlanId: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return getWorkoutPlansWorkoutIdWorkoutSessionsWithRequestBuilder(workoutPlanId: workoutPlanId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get workout sessions of workout plan
     - GET /workoutPlans/{workoutPlanId}/workoutSessions/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter workoutPlanId: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func getWorkoutPlansWorkoutIdWorkoutSessionsWithRequestBuilder(workoutPlanId: Double) -> RequestBuilder<Void> {
        var localVariablePath = "/workoutPlans/{workoutPlanId}/workoutSessions/"
        let workoutPlanIdPreEscape = "\(APIHelper.mapValueToPathItem(workoutPlanId))"
        let workoutPlanIdPostEscape = workoutPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workoutPlanId}", with: workoutPlanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get specific workout session
     
     - parameter workoutSessionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWorkoutSessionsWorkoutSessionId(workoutSessionId: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: WorkoutSession?, _ error: Error?) -> Void)) -> RequestTask {
        return getWorkoutSessionsWorkoutSessionIdWithRequestBuilder(workoutSessionId: workoutSessionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get specific workout session
     - GET /workoutSessions/{workoutSessionId}
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter workoutSessionId: (path)  
     - returns: RequestBuilder<WorkoutSession> 
     */
    open class func getWorkoutSessionsWorkoutSessionIdWithRequestBuilder(workoutSessionId: Double) -> RequestBuilder<WorkoutSession> {
        var localVariablePath = "/workoutSessions/{workoutSessionId}"
        let workoutSessionIdPreEscape = "\(APIHelper.mapValueToPathItem(workoutSessionId))"
        let workoutSessionIdPostEscape = workoutSessionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workoutSessionId}", with: workoutSessionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<WorkoutSession>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Add workout sessions of workout plan
     
     - parameter workoutPlanId: (path)  
     - parameter workoutSession: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postWorkoutPlansWorkoutPlanIdWorkoutSessions(workoutPlanId: Double, workoutSession: WorkoutSession? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return postWorkoutPlansWorkoutPlanIdWorkoutSessionsWithRequestBuilder(workoutPlanId: workoutPlanId, workoutSession: workoutSession).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add workout sessions of workout plan
     - POST /workoutPlans/{workoutPlanId}/workoutSessions/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter workoutPlanId: (path)  
     - parameter workoutSession: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func postWorkoutPlansWorkoutPlanIdWorkoutSessionsWithRequestBuilder(workoutPlanId: Double, workoutSession: WorkoutSession? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/workoutPlans/{workoutPlanId}/workoutSessions/"
        let workoutPlanIdPreEscape = "\(APIHelper.mapValueToPathItem(workoutPlanId))"
        let workoutPlanIdPostEscape = workoutPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workoutPlanId}", with: workoutPlanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workoutSession)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update specific workout plan
     
     - parameter workoutPlanId: (path)  
     - parameter workoutPlan: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func putWorkoutPlansWorkoutPlanId(workoutPlanId: Double, workoutPlan: WorkoutPlan? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return putWorkoutPlansWorkoutPlanIdWithRequestBuilder(workoutPlanId: workoutPlanId, workoutPlan: workoutPlan).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update specific workout plan
     - PUT /workoutPlans/{workoutPlanId}/
     - BASIC:
       - type: http
       - name: bearerAuth
     - parameter workoutPlanId: (path)  
     - parameter workoutPlan: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func putWorkoutPlansWorkoutPlanIdWithRequestBuilder(workoutPlanId: Double, workoutPlan: WorkoutPlan? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/workoutPlans/{workoutPlanId}/"
        let workoutPlanIdPreEscape = "\(APIHelper.mapValueToPathItem(workoutPlanId))"
        let workoutPlanIdPostEscape = workoutPlanIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workoutPlanId}", with: workoutPlanIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: workoutPlan)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
